
Jump 		Begin 	/Skips the variables defined below

/Variables for the list creation
Size,			DEC 		6
Counter,		DEC 		5

/Numeric variables for basic addition
One,			DEC	 		1
Two,			DEC 		2
Four,			DEC 		4
MinOne,			DEC 		-1

/List management
ListAddress,		HEX 		330		/Stores the starting address of the list
ListAddPointer,	HEX 		330		/Points to the current item of the list
ListAllocation,	HEX 		300		/Stores the addresses of the start addresses
															/of all lists created
/Stack management
StackPointer,		HEX 		0		/Stack's beginning address

/Temporary labels
t0,					DEC 		0 		/Used to store various (temporary) values
t1,					DEC 		0
temp, 			DEC 		0		/This is used specifically to load/store indirectly multiple times

				
Begin,			Input  						/Input size
						

    				StoreI 		ListAddress 	/Store size value at the list's starting address

    				Load 		ListAddress 	/Store the list's starting address as reference
    				StoreI		ListAllocation

    				Load 		ListAllocation 	/Move this pointer up (one value), ready to
    				Add 		One				/store the address of another list (if needed)
    				Store 		ListAllocation

 					Load 		Counter			/Load the counter (which decreases every time a value
                							/is entered to the current list

EnterItems,		Skipcond 	800				/Don't end if there are still items left to enter
				Jump 		StopEnterItems

    			Load 		ListAddPointer 	/Move list pointer up by one value
                Add 		One
                Store 		ListAddPointer

                Input 						/Enter item
                StoreI 		ListAddPointer	/Store to the location of the pointer

                Load 		Counter 		/Reduce counter by one
                Add 		MinOne
                Store 		Counter

                Jump 		EnterItems		/Repeat

StopEnterItems,	Load 		ListAddPointer 	/Move the list pointer up one more time
                Add 		One
                Store 		ListAddPointer 	/Reset both list pointer and the actual starting
                Store		ListAddress		/address to the next available spot for a new list


				/Call the quicksort subroutine

                /Store arguments onto the stack
                Load 		StackPointer 	/Move stack pointer up by one (allocates a slot in the stack
                Add 		MinOne			/for a value to store)
                Store 		StackPointer

                /Store the size of required list to sort on the stack
                Load 		ListAllocation 	/Load the address of the list to sort. This is at the
                Add 		MinOne			/list of the address of lists

                Store 		temp 			/Store this value to temp first

                LoadI 		temp 			/Then load the list's start address (containing the size value)
                							/by indirect load
                Store 		temp 			/Save address to temp
                LoadI 		temp 			/Load indirectly again to obtain the size value
                StoreI 		StackPointer 	/Store to stack

                /Store the address of the first item of the list (i.e. not including the size value)
                Load 		StackPointer 	/Move stack pointer up
                Add 		MinOne
                Store 		StackPointer

                Load 		ListAllocation 	/Take address of the list required
                Add 		MinOne			/(Negative 1 offset first, as before)
                Store 		temp			/Load indirectly to obtain the list's address
                LoadI 		temp
                Add 		One				/Add an offset of 1 to ignore the size value
                

                /Print the sorted list
                Load 		ListAllocation 	/Load the location of the list's address
                Add 		MinOne
                Store 		temp
                LoadI		temp			/This loads the list's address
                Store 		temp
                LoadI		temp			/and take the size of the list
                Store 		t0				/to store into t0 (this is a counter)

                Load 		temp			/Load address from temp and add one
                Add 		One
                Store 		t1				/store to t1. It is a temporary list pointer

                Load 		t0				/Load counter

PrintList,		Skipcond	800				/Continue to print if the counter hasn't reached 0
				Jump 		EndMain

                LoadI		t1				/Load item in the list pointer
                Output

                Load 		t1				/Move list pointer up
                Add 		One
                Store		t1

                Load 		t0				/Reduce counter by one
                Add 		MinOne
                Store 		t0

                Jump 		PrintList

EndMain,       	Halt